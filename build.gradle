buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.kohsuke:github-api:1.114"
    }
}

plugins {
    id "java-library"
    id "application"
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.5.0'
    id "signing"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.2.3"
project.ext.jomlVersion = "1.10.0"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = System.getProperty("os.arch").contains("64") ? "natives-windows" : "natives-windows-x86"
        break
}

repositories {
    mavenCentral()
}

dependencies {
    shadow(implementation(project(":profiler")))
    shadow(api("org.lwjgl:lwjgl:$lwjglVersion"))
    shadow(api("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
    shadow(api("org.lwjgl:lwjgl-shaderc:$lwjglVersion"))
    shadow(api("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
    shadow(runtimeOnly("org.lwjgl:lwjgl::$lwjglNatives"))
    shadow(runtimeOnly("org.lwjgl:lwjgl-glfw::$lwjglNatives"))
    shadow(runtimeOnly("org.lwjgl:lwjgl-shaderc::$lwjglNatives"))
    if (lwjglNatives == "natives-macos") runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"
    shadow(api("org.joml:joml:${jomlVersion}"))

    shadow(api("org.jetbrains:annotations:19.0.0"))
}

run {
    mainClass.set("com.oroarmor.vulkan.Main")
    jvmArgs("-javaagent:${project.rootDir}/profiler/build/libs/${archivesBaseName}-profiler-${version}.jar")
}

ext.changelog = ""

tasks.withType(Sign) {
    onlyIf { project.hasProperty("sign") }
}

if (project.hasProperty("sign")) {
    signing {
        useGpgCmd()
        sign configurations.archives
    }
}

license {
    header = rootProject.file("LICENSE")
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        attributes "Main-Class": (tasks.getByName("run") as JavaExec).getMain()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Vulkan Java'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'A Library for LWJGL programs'
                url = 'http://github.com/OroArmor/java-vulkan'

                scm {
                    connection = 'scm:git:git://github.com/OroArmor/java-vulkan.git'
                    developerConnection = 'scm:git:ssh://github.com:OroArmor/java-vulkan.git'
                    url = 'http://github.com/OroArmor/java-vulkan'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://mit-license.org/'
                    }
                }

                developers {
                    developer {
                        id = 'OroArmor'
                        name = 'Eli Orona'
                        email = 'eliorona@live.com'
                        url = "oroarmor.com"
                    }
                }
            }
        }
    }
    repositories {
        def ossrhUsername = "OroArmor"
        def ossrhPassword = (project.hasProperty("ossrhPassword") ? project.property("ossrhPassword") : System.getenv("OSSRH_PASSWORD")) as String
        mavenLocal()
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials) {
                username = ossrhUsername
                password = ossrhPassword
            }
            name = "mavenCentral"
        }
    }
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty("sign") }
}

if (project.hasProperty("sign")) {
    signing {
        useGpgCmd()
        sign publishing.publications.getByName("mavenJava")
    }
}

task github {
    onlyIf {
        System.getenv().GITHUB_TOKEN
    }

    doLast {
        def github = org.kohsuke.github.GitHub.connectUsingOAuth(System.getenv().GITHUB_TOKEN as String)
        def repository = github.getRepository("OroArmor/java-vulkan")

        def releaseBuilder = new org.kohsuke.github.GHReleaseBuilder(repository, project.mod_version)
        releaseBuilder.name("$project.project_name $project.mod_version for $project.minecraft_version")
        releaseBuilder.body(project.ext.changelog)
        releaseBuilder.commitish("master")

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.rootDir}/build/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
    }
}

task generateChangelog {
    def changelogFile = file("./CHANGELOG.md")
    def contents = changelogFile.text
    def changelogs = contents.contains("----") ? contents.split("\\-\\-\\-\\-") : [contents]
    project.ext.changelog = changelogs.find { log -> log.contains("Version " + project.version + ":") }
    println project.ext.changelog
}